from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from product.models import BlogType, Blog, Product, Order, Contact
from telegram.ext import CallbackContext
from django.core.paginator import Paginator

from bot.models import BotAdmin

def start(update: Update, context: CallbackContext):

    chat_id = update.effective_chat.id

    if BotAdmin.objects.filter(chat_id=chat_id, is_active=True).exists():
        update.message.reply_text(
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!',
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton('üõí –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã'), KeyboardButton('üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è')]],
                resize_keyboard=True
            )
        )
        return

    update.message.reply_text('–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=ReplyKeyboardMarkup([[KeyboardButton('üîë –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø')]], resize_keyboard=True))
    return

def admin_permission(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    fullname = update.effective_chat.full_name
    username = update.effective_chat.username

    if BotAdmin.objects.filter(chat_id=chat_id).exists():
        update.message.reply_text('–í—ã —É–∂–µ –ø—ã—Ç–∞–ª–∏—Å—å –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ!')
        return

    BotAdmin.objects.create(chat_id=chat_id, fullname=fullname, username=username, is_active=False)
    bot_admin = BotAdmin.objects.filter(is_active=True).values('chat_id', 'fullname', 'username')
    for admin in bot_admin:
        context.bot.send_message(admin['chat_id'], f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! \n\nChat ID: {chat_id}\n–ü–æ–ª–Ω–æ–µ –∏–º—è: {fullname}\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}', reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton('–†–∞–∑—Ä–µ—à–∏—Ç—å', callback_data=f'allow_access_{chat_id}'), InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'deny_access_{chat_id}')]]))
    update.message.reply_text('–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –≤–∞–º —Å–∫–æ—Ä–æ –¥–∞–¥—É—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ!')

def allow_access(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    if data.startswith('allow_access_'):
        chat_id = data.split('_')[2]
        BotAdmin.objects.filter(chat_id=chat_id).update(is_active=True)
        context.bot.send_message(chat_id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∞–ª –≤–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞!')
        query.edit_message_text('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!')

    elif data.startswith('deny_access_'):
        chat_id = data.split('_')[2]
        BotAdmin.objects.filter(chat_id=chat_id).delete()
        context.bot.send_message(chat_id, '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –¥–∞–ª –≤–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ!')
        query.edit_message_text('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!')

def view_order_types(update: Update, context: CallbackContext):
    order_types = Order.STATUS_TYPES
    order_types_buttons = []
    for i in range(0, len(order_types), 2):
        buttons = []
        for j in range(2):
            if i + j < len(order_types):
                status_code, status_name = order_types[i + j]
                order_count = Order.objects.filter(status=status_code).count()
                buttons.append(InlineKeyboardButton(f"{status_name} ({order_count})", callback_data=f"order_status_{status_code}"))
        order_types_buttons.append(buttons)

    order_types_buttons.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_start')])

    update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:',
        reply_markup=InlineKeyboardMarkup(order_types_buttons)
    )

def view_order_regions(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith("order_status_"):
        status_code = query.data.split("_")[2]
        regions = Order.UZB_REGIONS

        region_buttons = []
        for i in range(0, len(regions), 2):
            buttons = []
            for j in range(2):
                if i + j < len(regions):
                    region_code, region_name = regions[i + j]
                    region_count = Order.objects.filter(status=status_code, region=region_code).count()
                    buttons.append(InlineKeyboardButton(f"{region_name} ({region_count})", callback_data=f"region_{region_code}_{status_code}"))
            region_buttons.append(buttons)
        region_buttons.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_start_')])

        query.edit_message_text(
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:',
            reply_markup=InlineKeyboardMarkup(region_buttons)
        )


def view_orders_by_region_status(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith("region_"):
        _, region_code, status_code = query.data.split("_")

        orders = Order.objects.filter(region=region_code, status=status_code)

        if not orders.exists():
            query.edit_message_text("–ó–∞–∫–∞–∑—ã –ø–æ —ç—Ç–æ–º—É —Ä–µ–≥–∏–æ–Ω—É –∏ —Å—Ç–∞—Ç—É—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        page_number = int(context.args[0]) if context.args else 1
        paginator = Paginator(orders, 10)

        if page_number < 1 or page_number > paginator.num_pages:
            page_number = 1

        current_page = paginator.page(page_number)

        keyboard = [
            [InlineKeyboardButton(f"–ü—Ä–æ–¥—É–∫—Ç: {order.product.name}", callback_data=f"order_{order.pk}")]
            for order in current_page
        ]

        navigation_buttons = []
        if current_page.has_previous():
            navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"region_{region_code}_{status_code}_{page_number - 1}"))

        if current_page.has_next():
            navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"region_{region_code}_{status_code}_{page_number + 1}"))

        if navigation_buttons:
            keyboard.append(navigation_buttons)

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"order_status_{status_code}")])
        try:
            query.edit_message_text("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))
        except:
            query.message.delete()
            query.message.reply_text("–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:", reply_markup=InlineKeyboardMarkup(keyboard))
        

def view_order(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith("order_"):
        query.message.delete()
        order_id = query.data.split("_")[-1]
        order = Order.objects.get(id=order_id)

        order_status_buttons = [[InlineKeyboardButton("–ì–æ–≤–æ—Ä–∏—Ç—å", callback_data=f"st_chat_{order_id}"), InlineKeyboardButton("–ü–µ—Ä–µ–≥–æ–≤–æ—Ä—ã", callback_data=f"st_rechat_{order_id}")],
                                [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å —É—Å–ø–µ—à–Ω–æ", callback_data=f"st_success_{order_id}"), InlineKeyboardButton("–û—Ç–º–µ–Ω–µ–Ω–æ", callback_data=f"st_cancel_{order_id}")],
                                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"region_{order.region}_{order.status}")]]

        if order.product.photo:
            return context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=order.product.photo.file,
                caption=f"–ó–∞–∫–∞–∑: {order.product.name}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {order.client_name}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {order.phone_number}\n"
                f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.get_status_display()}\n"
                f"–†–µ–≥–∏–æ–Ω: {order.get_region_display()}\n"
                f"–°–æ–∑–¥–∞–Ω–æ: {order.created_at.strftime('%d-%m-%Y %H:%M')}\n"
                f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {order.updated_at.strftime('%d-%m-%Y %H:%M')}",
                reply_markup=InlineKeyboardMarkup(order_status_buttons)
            )

def order_statused(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith("st_chat_"):
        order_id = query.data.split("_")[2]
        order = Order.objects.get(pk=order_id)
        order.status = "cn"
        order.save()
        query.message.delete()
        query.message.reply_text("–ò–¥—ë—Ç –æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_start")]]))

    elif query.data.startswith("st_rechat_"):
        order_id = query.data.split("_")[2]
        order = Order.objects.get(pk=order_id)
        order.status = "rc"
        order.save()
        query.message.delete()
        query.message.reply_text("–û—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_start")]]))

    elif query.data.startswith("st_success_"):
        order_id = query.data.split("_")[2]
        order = Order.objects.get(pk=order_id)
        order.status = "cd"
        order.save()
        query.message.delete()
        query.message.reply_text("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_start")]]))

    elif query.data.startswith("st_cancel_"):
        order_id = query.data.split("_")[2]
        order = Order.objects.get(pk=order_id)
        order.status = "cnd"
        order.save()
        query.message.delete()
        query.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_start")]]))

def back_to_start(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    query.message.delete()
    query.message.reply_text(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!',
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton('üõí –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤'), KeyboardButton('üìù –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π')]],
            resize_keyboard=True
        )
    )


def view_contacts(update: Update, context: CallbackContext):
    page_number = int(context.args[0]) if context.args else 1

    contacts = Contact.objects.all()

    if not contacts.exists():
        update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]))
        return

    paginator = Paginator(contacts, 10)

    if page_number < 1 or page_number > paginator.num_pages:
        page_number = 1

    current_page = paginator.page(page_number)

    keyboard = [
        [InlineKeyboardButton(f"{contact.name} ({contact.phone})", callback_data=f"contact_{contact.id}")]
        for contact in current_page
    ]

    navigation_buttons = []

    if current_page.has_previous():
        navigation_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"contacts_page_{page_number - 1}"))

    if current_page.has_next():
        navigation_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"contacts_page_{page_number + 1}"))

    if navigation_buttons:
        keyboard.append(navigation_buttons)

    update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π:", reply_markup=InlineKeyboardMarkup(keyboard))


def view_contact_detail(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    contact_id = int(query.data.split("_")[1])
    contact = Contact.objects.get(id=contact_id)

    message = f"–ò–º—è: {contact.name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {contact.phone}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {contact.message}"

    query.edit_message_text(message, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]))
